import numpy as np
from fidimag.micro import Sim
from fidimag.common import CuboidMesh
from fidimag.micro import UniformExchange, Demag, DMI, UniaxialAnisotropy
from fidimag.micro import Zeeman, TimeZeeman

np.random.seed(10000)

def init_m(pos):
    return np.random.random(3)+(0,0,0.5)

def spatial_Ms(pos):
    x,y,z = pos
    if x<20 and y<3 and z<6:
        return 0.0
    return 8.0e5


def relax_system(mesh):

    sim = Sim(mesh, name='relax')

    sim.driver.set_tols(rtol=1e-10, atol=1e-10)
    sim.driver.alpha = 0.1
    sim.driver.gamma = 2.211e5
    sim.Ms = spatial_Ms
    print(sim.Ms)

    sim.set_m(init_m)

    A = 1.3e-11
    exch = UniformExchange(A=A)
    sim.add(exch)

    demag = Demag()
    sim.add(demag)

    dmi = DMI(D=4e-3)
    sim.add(dmi)

    dmi2 = DMI(D=2e-3, dmi_type="interfacial")
    sim.add(dmi2)

    anis = UniaxialAnisotropy(-3e4, axis=(0, 0, 1))
    sim.add(anis)

    sim.relax(dt=1e-13, stopping_dmdt=5e4, max_steps=5000,
              save_m_steps=100, save_vtk_steps=50)

    #np.save('m0.npy', sim.spin)
    fd = demag.compute_field(sim.spin)
    fe = exch.compute_field(sim.spin)
    fdmi = dmi.compute_field(sim.spin)
    fdmi2 = dmi2.compute_field(sim.spin)
    fanis = anis.compute_field(sim.spin)
    np.savetxt("test_fields.txt",np.transpose(
                        [np.concatenate((sim.Ms, sim.Ms, sim.Ms, [0.0])),
                         np.concatenate((sim.spin,[100])),
                         np.concatenate((fd,[demag.compute_energy()])),
                         np.concatenate((fe,[exch.compute_energy()])),
                         np.concatenate((fdmi,[dmi.compute_energy()])),
                         np.concatenate((fdmi2,[dmi2.compute_energy()])),
                         np.concatenate((fanis,[anis.compute_energy()]))]),
              header="Generated by Fidimag. Size=20x5x3, 2.5nm x 2.5nm x 3nm, Ms=8.0e5A/m, A=1.3e-11 J/m," +
              "  D=4e-3 J/m^2, D_int=2e-3 J/m^2, Ku=-3e4 J/m^3 axis=(0,0,1).\n  Ms "+"".ljust(20)+  " m0 "+"".ljust(20)+"demag" +
              "".ljust(20)+"exch" + "".ljust(22)+"dmi" + "".ljust(22)+"dmi_interfacial" + "".ljust(22) + "anis")


if __name__ == '__main__':

    mesh = CuboidMesh(nx=20, ny=5, nz=3, dx=2.5, dy=2.5, dz=3, unit_length=1e-9)
    relax_system(mesh)
